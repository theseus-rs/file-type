use crate::format::{
    ByteSequence, FileFormat, PositionType, Regex, RelatedFormat, RelationshipType, Signature,
    SourceType, Token,
};

pub(crate) const PRONOM_2474: FileFormat = FileFormat {
    id: 2_474,
    source_type: SourceType::Pronom,
    name: "Inspiration Software File",
    extensions: &["isf"],
    media_types: &[],
    signatures: &[Signature {
        byte_sequences: &[ByteSequence {
            position_type: PositionType::BOF,
            offset: Some(0),
            regex: Regex {
                tokens: &[
                    Token::Literal(&[
                        0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F,
                        0x78, 0x2D, 0x69, 0x6E, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6F,
                        0x6E, 0x20, 0x20, 0x20, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
                        0x20, 0x62, 0x79, 0x20, 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
                        0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x49, 0x6E, 0x73, 0x70, 0x69, 0x72,
                        0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61,
                        0x72, 0x65, 0x2C, 0x20, 0x49, 0x6E, 0x63, 0x2E,
                    ]),
                    Token::WildcardCountRange(80, 258),
                    Token::Literal(&[0x10, 0x4A, 0x46, 0x49, 0x46]),
                ],
            },
        }],
    }],
    related_formats: &[],
};
