use crate::format::{
    ByteSequence, FileFormat, InternalSignature, PositionType, Regex, RelatedFormat,
    RelationshipType, Token,
};

pub(crate) const FMT_134: FileFormat = FileFormat {
    id: 687,
    puid: "fmt/134",
    name: "MPEG 1/2 Audio Layer 3",
    extensions: &["mp3"],
    media_types: &["audio/mpeg"],
    internal_signatures: &[
        InternalSignature {
            byte_sequences: &[
                ByteSequence {
                    position_type: PositionType::BOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[Token::Literal(&[0x49, 0x44, 0x33])],
                    },
                },
                ByteSequence {
                    position_type: PositionType::EOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[
                            Token::Literal(&[0xFF, 0xFB]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFB]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFB]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFB]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFB]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFB]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFB]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(47, 1_795),
                        ],
                    },
                },
            ],
        },
        InternalSignature {
            byte_sequences: &[
                ByteSequence {
                    position_type: PositionType::BOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[Token::Literal(&[0x49, 0x44, 0x33])],
                    },
                },
                ByteSequence {
                    position_type: PositionType::EOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[
                            Token::Literal(&[0xFF, 0xF3]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF3]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF3]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF3]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF3]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF3]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF3]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(47, 1_795),
                        ],
                    },
                },
            ],
        },
        InternalSignature {
            byte_sequences: &[
                ByteSequence {
                    position_type: PositionType::BOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[Token::Literal(&[0x49, 0x44, 0x33])],
                    },
                },
                ByteSequence {
                    position_type: PositionType::EOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[
                            Token::Literal(&[0xFF, 0xFA]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFA]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFA]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFA]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFA]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFA]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xFA]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(47, 1_795),
                        ],
                    },
                },
            ],
        },
        InternalSignature {
            byte_sequences: &[
                ByteSequence {
                    position_type: PositionType::BOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[Token::Literal(&[0x49, 0x44, 0x33])],
                    },
                },
                ByteSequence {
                    position_type: PositionType::EOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[
                            Token::Literal(&[0xFF, 0xF2]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF2]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF2]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF2]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF2]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF2]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(46, 1_439),
                            Token::Literal(&[0xFF, 0xF2]),
                            Token::Range(&[0x10], &[0xEB]),
                            Token::WildcardCountRange(47, 1_795),
                        ],
                    },
                },
            ],
        },
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFB]),
                        Token::Range(&[0x10], &[0xEB]),
                    ],
                },
            }],
        },
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF3]),
                        Token::Range(&[0x10], &[0xEB]),
                    ],
                },
            }],
        },
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xFA]),
                        Token::Range(&[0x10], &[0xEB]),
                    ],
                },
            }],
        },
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xF2]),
                        Token::Range(&[0x10], &[0xEB]),
                    ],
                },
            }],
        },
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                        Token::WildcardCountRange(46, 1_439),
                        Token::Literal(&[0xFF, 0xE3]),
                        Token::Range(&[0x10], &[0xEB]),
                    ],
                },
            }],
        },
    ],
    related_formats: &[
        RelatedFormat {
            id: 613,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 614,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 615,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 616,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 617,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 618,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 625,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 637,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 646,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 647,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 648,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 649,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 650,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 651,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 652,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 653,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 872,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 1_016,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 1_099,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 1_192,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 1_357,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 1_986,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_098,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_290,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_291,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_292,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_384,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_400,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_401,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_486,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_539,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_557,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_597,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_663,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_686,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_719,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_731,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
        RelatedFormat {
            id: 2_762,
            relationship_type: RelationshipType::HasLowerPriorityThan,
        },
    ],
};
