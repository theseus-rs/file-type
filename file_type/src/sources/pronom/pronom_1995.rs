use crate::FileType;
use crate::format::{ByteSequence, FileFormat, PositionType, Regex, Signature, SourceType, Token};

pub(crate) const PRONOM_1995: FileType = FileType {
    file_format: &FileFormat {
        id: 1_995,
        source_type: SourceType::Pronom,
        name: "Apple Icon Image Format",
        extensions: &["icns"],
        media_types: &[],
        signatures: &[Signature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0x69, 0x63, 0x6E, 0x73]),
                        Token::WildcardCount(4),
                        Token::Any(&[
                            &[Token::Literal(&[0x49, 0x43, 0x4F, 0x4E])],
                            &[Token::Literal(&[0x49, 0x43, 0x4E, 0x23])],
                            &[Token::Literal(&[0x69, 0x63, 0x6D, 0x23])],
                            &[Token::Literal(&[0x69, 0x63, 0x6D, 0x34])],
                            &[Token::Literal(&[0x69, 0x63, 0x6D, 0x38])],
                            &[Token::Literal(&[0x69, 0x63, 0x73, 0x23])],
                            &[Token::Literal(&[0x69, 0x63, 0x73, 0x34])],
                            &[Token::Literal(&[0x69, 0x63, 0x73, 0x38])],
                            &[Token::Literal(&[0x69, 0x73, 0x33, 0x32])],
                            &[Token::Literal(&[0x73, 0x38, 0x6D, 0x6B])],
                            &[Token::Literal(&[0x69, 0x63, 0x6C, 0x34])],
                            &[Token::Literal(&[0x69, 0x63, 0x6C, 0x38])],
                            &[Token::Literal(&[0x69, 0x6C, 0x33, 0x32])],
                            &[Token::Literal(&[0x6C, 0x38, 0x6D, 0x6B])],
                            &[Token::Literal(&[0x69, 0x63, 0x68, 0x23])],
                            &[Token::Literal(&[0x69, 0x63, 0x68, 0x34])],
                            &[Token::Literal(&[0x69, 0x63, 0x68, 0x38])],
                            &[Token::Literal(&[0x69, 0x68, 0x33, 0x32])],
                            &[Token::Literal(&[0x68, 0x38, 0x6D, 0x6B])],
                            &[Token::Literal(&[0x69, 0x74, 0x33, 0x32])],
                            &[Token::Literal(&[0x74, 0x38, 0x6D, 0x6B])],
                            &[Token::Literal(&[0x69, 0x63, 0x70, 0x34])],
                            &[Token::Literal(&[0x69, 0x63, 0x70, 0x35])],
                            &[Token::Literal(&[0x69, 0x63, 0x70, 0x36])],
                            &[Token::Literal(&[0x69, 0x63, 0x30, 0x37])],
                            &[Token::Literal(&[0x69, 0x63, 0x30, 0x38])],
                            &[Token::Literal(&[0x69, 0x63, 0x30, 0x39])],
                            &[Token::Literal(&[0x69, 0x63, 0x31, 0x30])],
                            &[Token::Literal(&[0x69, 0x63, 0x31, 0x31])],
                            &[Token::Literal(&[0x69, 0x63, 0x31, 0x32])],
                            &[Token::Literal(&[0x69, 0x63, 0x31, 0x33])],
                            &[Token::Literal(&[0x54, 0x4F, 0x43, 0x20])],
                            &[Token::Literal(&[0x69, 0x63, 0x6E, 0x56])],
                        ]),
                    ],
                },
            }],
        }],
        related_formats: &[],
    },
};
