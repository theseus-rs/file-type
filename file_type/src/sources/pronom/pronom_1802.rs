use crate::FileType;
use crate::format::{ByteSequence, FileFormat, PositionType, Regex, Signature, SourceType, Token};

pub(crate) const PRONOM_1802: FileType = FileType {
    file_format: &FileFormat {
        id: 1_802,
        source_type: SourceType::Pronom,
        name: "SPSS Portable Data Format",
        extensions: &["por"],
        media_types: &[],
        signatures: &[Signature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[Token::Literal(&[
                        0xC1, 0xE2, 0xC3, 0xC9, 0xC9, 0x40, 0xE2, 0xD7, 0xE2, 0xE2, 0x40, 0xD7,
                        0xD6, 0xD9, 0xE3, 0x40, 0xC6, 0xC9, 0xD3, 0xC5, 0x40, 0x40, 0x40, 0x40,
                        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
                        0x40, 0x40, 0x40, 0x40, 0x41, 0x53, 0x43, 0x49, 0x49, 0x20, 0x53, 0x50,
                        0x53, 0x53, 0x20, 0x50, 0x4F, 0x52, 0x54, 0x20, 0x46, 0x49, 0x4C, 0x45,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0D, 0x0A, 0x30, 0x30,
                        0x30, 0x30, 0x30, 0x2D, 0x30, 0x30, 0x30, 0x30, 0x2D, 0x30, 0x30, 0x30,
                        0x30, 0x2D, 0x30, 0x30, 0x30, 0x30, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
                        0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D,
                        0x2D, 0x2D, 0x21, 0x33, 0x23, 0x29, 0x29, 0x30, 0x33, 0x30, 0x33, 0x33,
                        0x30, 0x30, 0x2F, 0x32, 0x34, 0x30, 0x26, 0x29, 0x2C, 0x25, 0x30, 0x30,
                        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x30, 0x32, 0x30, 0x30,
                        0x30, 0x30, 0x32, 0x27, 0x32, 0x32, 0x30, 0x27, 0x26, 0x29, 0x33, 0x30,
                        0x30, 0x30, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                    ])],
                },
            }],
        }],
        related_formats: &[],
    },
};
