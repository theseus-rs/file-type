use crate::format::{
    ByteSequence, FileFormat, InternalSignature, PositionType, Regex, RelatedFormat,
    RelationshipType, Token,
};

pub(crate) const FMT_409: FileFormat = FileFormat {
    id: 1_157,
    puid: "fmt/409",
    name: "Portable Bitmap Image - Binary",
    extensions: &["pbmb", "pnm"],
    media_types: &[],
    internal_signatures: &[
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0x50, 0x34]),
                        Token::Any(&[
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0D])],
                            &[Token::Literal(&[0x0A])],
                        ]),
                        Token::WildcardCountRange(0, 2),
                        Token::Literal(&[0x23]),
                        Token::WildcardCountRange(0, 70),
                        Token::Literal(&[0x0A]),
                        Token::Any(&[
                            &[Token::Literal(&[0x30])],
                            &[Token::Literal(&[0x31])],
                            &[Token::Literal(&[0x32])],
                            &[Token::Literal(&[0x33])],
                            &[Token::Literal(&[0x34])],
                            &[Token::Literal(&[0x35])],
                            &[Token::Literal(&[0x36])],
                            &[Token::Literal(&[0x37])],
                            &[Token::Literal(&[0x38])],
                            &[Token::Literal(&[0x39])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0A])],
                            &[Token::Literal(&[0x0D])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x30])],
                            &[Token::Literal(&[0x31])],
                            &[Token::Literal(&[0x32])],
                            &[Token::Literal(&[0x33])],
                            &[Token::Literal(&[0x34])],
                            &[Token::Literal(&[0x35])],
                            &[Token::Literal(&[0x36])],
                            &[Token::Literal(&[0x37])],
                            &[Token::Literal(&[0x38])],
                            &[Token::Literal(&[0x39])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0A])],
                            &[Token::Literal(&[0x0D])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x30])],
                            &[Token::Literal(&[0x31])],
                            &[Token::Literal(&[0x32])],
                            &[Token::Literal(&[0x33])],
                            &[Token::Literal(&[0x34])],
                            &[Token::Literal(&[0x35])],
                            &[Token::Literal(&[0x36])],
                            &[Token::Literal(&[0x37])],
                            &[Token::Literal(&[0x38])],
                            &[Token::Literal(&[0x39])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0A])],
                            &[Token::Literal(&[0x0D])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x30])],
                            &[Token::Literal(&[0x31])],
                            &[Token::Literal(&[0x32])],
                            &[Token::Literal(&[0x33])],
                            &[Token::Literal(&[0x34])],
                            &[Token::Literal(&[0x35])],
                            &[Token::Literal(&[0x36])],
                            &[Token::Literal(&[0x37])],
                            &[Token::Literal(&[0x38])],
                            &[Token::Literal(&[0x39])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0A])],
                            &[Token::Literal(&[0x0D])],
                        ]),
                    ],
                },
            }],
        },
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0x50, 0x34]),
                        Token::Any(&[
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0D])],
                            &[Token::Literal(&[0x0A])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x30])],
                            &[Token::Literal(&[0x31])],
                            &[Token::Literal(&[0x32])],
                            &[Token::Literal(&[0x33])],
                            &[Token::Literal(&[0x34])],
                            &[Token::Literal(&[0x35])],
                            &[Token::Literal(&[0x36])],
                            &[Token::Literal(&[0x37])],
                            &[Token::Literal(&[0x38])],
                            &[Token::Literal(&[0x39])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0A])],
                            &[Token::Literal(&[0x0D])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x30])],
                            &[Token::Literal(&[0x31])],
                            &[Token::Literal(&[0x32])],
                            &[Token::Literal(&[0x33])],
                            &[Token::Literal(&[0x34])],
                            &[Token::Literal(&[0x35])],
                            &[Token::Literal(&[0x36])],
                            &[Token::Literal(&[0x37])],
                            &[Token::Literal(&[0x38])],
                            &[Token::Literal(&[0x39])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0A])],
                            &[Token::Literal(&[0x0D])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x30])],
                            &[Token::Literal(&[0x31])],
                            &[Token::Literal(&[0x32])],
                            &[Token::Literal(&[0x33])],
                            &[Token::Literal(&[0x34])],
                            &[Token::Literal(&[0x35])],
                            &[Token::Literal(&[0x36])],
                            &[Token::Literal(&[0x37])],
                            &[Token::Literal(&[0x38])],
                            &[Token::Literal(&[0x39])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0A])],
                            &[Token::Literal(&[0x0D])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x30])],
                            &[Token::Literal(&[0x31])],
                            &[Token::Literal(&[0x32])],
                            &[Token::Literal(&[0x33])],
                            &[Token::Literal(&[0x34])],
                            &[Token::Literal(&[0x35])],
                            &[Token::Literal(&[0x36])],
                            &[Token::Literal(&[0x37])],
                            &[Token::Literal(&[0x38])],
                            &[Token::Literal(&[0x39])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x0A])],
                            &[Token::Literal(&[0x0D])],
                        ]),
                    ],
                },
            }],
        },
    ],
    related_formats: &[],
};
