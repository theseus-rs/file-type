use crate::FileType;
use crate::format::{ByteSequence, FileFormat, PositionType, Regex, Signature, SourceType, Token};

pub(crate) const PRONOM_323: FileType = FileType {
    file_format: &FileFormat {
        id: 323,
        source_type: SourceType::Pronom,
        name: "ESRI MapInfo Export File",
        extensions: &["mif"],
        media_types: &[],
        signatures: &[
            Signature {
                byte_sequences: &[ByteSequence {
                    position_type: PositionType::BOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[
                            Token::Literal(&[0x56]),
                            Token::Any(&[&[Token::Literal(&[0x45])], &[Token::Literal(&[0x65])]]),
                            Token::Any(&[&[Token::Literal(&[0x52])], &[Token::Literal(&[0x72])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                            Token::Any(&[&[Token::Literal(&[0x49])], &[Token::Literal(&[0x69])]]),
                            Token::SingleWildcard,
                            Token::Any(&[&[Token::Literal(&[0x4E])], &[Token::Literal(&[0x6E])]]),
                            Token::WildcardCountRange(5, 9),
                            Token::Any(&[&[Token::Literal(&[0x43])], &[Token::Literal(&[0x63])]]),
                            Token::Any(&[&[Token::Literal(&[0x48])], &[Token::Literal(&[0x68])]]),
                            Token::Any(&[&[Token::Literal(&[0x41])], &[Token::Literal(&[0x61])]]),
                            Token::Any(&[&[Token::Literal(&[0x52])], &[Token::Literal(&[0x72])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                            Token::Any(&[&[Token::Literal(&[0x45])], &[Token::Literal(&[0x65])]]),
                            Token::Any(&[&[Token::Literal(&[0x54])], &[Token::Literal(&[0x74])]]),
                            Token::AnyWildcard,
                            Token::Literal(&[0x43]),
                            Token::Any(&[&[Token::Literal(&[0x4F])], &[Token::Literal(&[0x6F])]]),
                            Token::Any(&[&[Token::Literal(&[0x4C])], &[Token::Literal(&[0x6C])]]),
                            Token::Any(&[&[Token::Literal(&[0x55])], &[Token::Literal(&[0x75])]]),
                            Token::Any(&[&[Token::Literal(&[0x4D])], &[Token::Literal(&[0x6D])]]),
                            Token::Any(&[&[Token::Literal(&[0x4E])], &[Token::Literal(&[0x6E])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                        ],
                    },
                }],
            },
            Signature {
                byte_sequences: &[ByteSequence {
                    position_type: PositionType::BOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[
                            Token::Literal(&[0x56]),
                            Token::Any(&[&[Token::Literal(&[0x45])], &[Token::Literal(&[0x65])]]),
                            Token::Any(&[&[Token::Literal(&[0x52])], &[Token::Literal(&[0x72])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                            Token::Any(&[&[Token::Literal(&[0x49])], &[Token::Literal(&[0x69])]]),
                            Token::SingleWildcard,
                            Token::Any(&[&[Token::Literal(&[0x4E])], &[Token::Literal(&[0x6E])]]),
                            Token::WildcardCountRange(5, 9),
                            Token::Any(&[&[Token::Literal(&[0x43])], &[Token::Literal(&[0x63])]]),
                            Token::Any(&[&[Token::Literal(&[0x48])], &[Token::Literal(&[0x68])]]),
                            Token::Any(&[&[Token::Literal(&[0x41])], &[Token::Literal(&[0x61])]]),
                            Token::Any(&[&[Token::Literal(&[0x52])], &[Token::Literal(&[0x72])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                            Token::Any(&[&[Token::Literal(&[0x45])], &[Token::Literal(&[0x65])]]),
                            Token::Any(&[&[Token::Literal(&[0x54])], &[Token::Literal(&[0x74])]]),
                            Token::AnyWildcard,
                            Token::Literal(&[0x63]),
                            Token::Any(&[&[Token::Literal(&[0x4F])], &[Token::Literal(&[0x6F])]]),
                            Token::Any(&[&[Token::Literal(&[0x4C])], &[Token::Literal(&[0x6C])]]),
                            Token::Any(&[&[Token::Literal(&[0x55])], &[Token::Literal(&[0x75])]]),
                            Token::Any(&[&[Token::Literal(&[0x4D])], &[Token::Literal(&[0x6D])]]),
                            Token::Any(&[&[Token::Literal(&[0x4E])], &[Token::Literal(&[0x6E])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                        ],
                    },
                }],
            },
            Signature {
                byte_sequences: &[ByteSequence {
                    position_type: PositionType::BOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[
                            Token::Literal(&[0x76]),
                            Token::Any(&[&[Token::Literal(&[0x45])], &[Token::Literal(&[0x65])]]),
                            Token::Any(&[&[Token::Literal(&[0x52])], &[Token::Literal(&[0x72])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                            Token::Any(&[&[Token::Literal(&[0x49])], &[Token::Literal(&[0x69])]]),
                            Token::SingleWildcard,
                            Token::Any(&[&[Token::Literal(&[0x4E])], &[Token::Literal(&[0x6E])]]),
                            Token::WildcardCountRange(5, 9),
                            Token::Any(&[&[Token::Literal(&[0x43])], &[Token::Literal(&[0x63])]]),
                            Token::Any(&[&[Token::Literal(&[0x48])], &[Token::Literal(&[0x68])]]),
                            Token::Any(&[&[Token::Literal(&[0x41])], &[Token::Literal(&[0x61])]]),
                            Token::Any(&[&[Token::Literal(&[0x52])], &[Token::Literal(&[0x72])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                            Token::Any(&[&[Token::Literal(&[0x45])], &[Token::Literal(&[0x65])]]),
                            Token::Any(&[&[Token::Literal(&[0x54])], &[Token::Literal(&[0x74])]]),
                            Token::AnyWildcard,
                            Token::Literal(&[0x43]),
                            Token::Any(&[&[Token::Literal(&[0x4F])], &[Token::Literal(&[0x6F])]]),
                            Token::Any(&[&[Token::Literal(&[0x4C])], &[Token::Literal(&[0x6C])]]),
                            Token::Any(&[&[Token::Literal(&[0x55])], &[Token::Literal(&[0x75])]]),
                            Token::Any(&[&[Token::Literal(&[0x4D])], &[Token::Literal(&[0x6D])]]),
                            Token::Any(&[&[Token::Literal(&[0x4E])], &[Token::Literal(&[0x6E])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                        ],
                    },
                }],
            },
            Signature {
                byte_sequences: &[ByteSequence {
                    position_type: PositionType::BOF,
                    offset: Some(0),
                    regex: Regex {
                        tokens: &[
                            Token::Literal(&[0x76]),
                            Token::Any(&[&[Token::Literal(&[0x45])], &[Token::Literal(&[0x65])]]),
                            Token::Any(&[&[Token::Literal(&[0x52])], &[Token::Literal(&[0x72])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                            Token::Any(&[&[Token::Literal(&[0x49])], &[Token::Literal(&[0x69])]]),
                            Token::SingleWildcard,
                            Token::Any(&[&[Token::Literal(&[0x4E])], &[Token::Literal(&[0x6E])]]),
                            Token::WildcardCountRange(5, 9),
                            Token::Any(&[&[Token::Literal(&[0x43])], &[Token::Literal(&[0x63])]]),
                            Token::Any(&[&[Token::Literal(&[0x48])], &[Token::Literal(&[0x68])]]),
                            Token::Any(&[&[Token::Literal(&[0x41])], &[Token::Literal(&[0x61])]]),
                            Token::Any(&[&[Token::Literal(&[0x52])], &[Token::Literal(&[0x72])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                            Token::Any(&[&[Token::Literal(&[0x45])], &[Token::Literal(&[0x65])]]),
                            Token::Any(&[&[Token::Literal(&[0x54])], &[Token::Literal(&[0x74])]]),
                            Token::AnyWildcard,
                            Token::Literal(&[0x63]),
                            Token::Any(&[&[Token::Literal(&[0x4F])], &[Token::Literal(&[0x6F])]]),
                            Token::Any(&[&[Token::Literal(&[0x4C])], &[Token::Literal(&[0x6C])]]),
                            Token::Any(&[&[Token::Literal(&[0x55])], &[Token::Literal(&[0x75])]]),
                            Token::Any(&[&[Token::Literal(&[0x4D])], &[Token::Literal(&[0x6D])]]),
                            Token::Any(&[&[Token::Literal(&[0x4E])], &[Token::Literal(&[0x6E])]]),
                            Token::Any(&[&[Token::Literal(&[0x53])], &[Token::Literal(&[0x73])]]),
                        ],
                    },
                }],
            },
        ],
        related_formats: &[],
    },
};
