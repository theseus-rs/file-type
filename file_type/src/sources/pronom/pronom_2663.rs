use crate::format::{
    ByteSequence, FileFormat, PositionType, Regex, RelatedFormat, RelationshipType, Signature,
    SourceType, Token,
};

pub(crate) const PRONOM_2663: FileFormat = FileFormat {
    id: 2_663,
    source_type: SourceType::Pronom,
    name: "Audio Data Transport Stream",
    extensions: &["aac", "adts"],
    media_types: &["audio/aac", "audio/vnd.dlna.adts"],
    signatures: &[
        Signature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0xFF]),
                        Token::Any(&[
                            &[Token::Literal(&[0xF0])],
                            &[Token::Literal(&[0xF1])],
                            &[Token::Literal(&[0xF8])],
                            &[Token::Literal(&[0xF9])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x40])],
                            &[Token::Literal(&[0x41])],
                            &[Token::Literal(&[0x44])],
                            &[Token::Literal(&[0x45])],
                            &[Token::Literal(&[0x48])],
                            &[Token::Literal(&[0x49])],
                            &[Token::Literal(&[0x4C])],
                            &[Token::Literal(&[0x4D])],
                            &[Token::Literal(&[0x50])],
                            &[Token::Literal(&[0x51])],
                            &[Token::Literal(&[0x54])],
                            &[Token::Literal(&[0x55])],
                            &[Token::Literal(&[0x58])],
                            &[Token::Literal(&[0x59])],
                            &[Token::Literal(&[0x5C])],
                            &[Token::Literal(&[0x5D])],
                            &[Token::Literal(&[0x60])],
                            &[Token::Literal(&[0x61])],
                            &[Token::Literal(&[0x64])],
                            &[Token::Literal(&[0x65])],
                            &[Token::Literal(&[0x68])],
                            &[Token::Literal(&[0x69])],
                            &[Token::Literal(&[0x6C])],
                            &[Token::Literal(&[0x6D])],
                            &[Token::Literal(&[0x70])],
                            &[Token::Literal(&[0x71])],
                            &[Token::Literal(&[0x80])],
                            &[Token::Literal(&[0x81])],
                            &[Token::Literal(&[0x84])],
                            &[Token::Literal(&[0x85])],
                            &[Token::Literal(&[0x88])],
                            &[Token::Literal(&[0x89])],
                            &[Token::Literal(&[0x8C])],
                            &[Token::Literal(&[0x8D])],
                            &[Token::Literal(&[0x90])],
                            &[Token::Literal(&[0x91])],
                            &[Token::Literal(&[0x94])],
                            &[Token::Literal(&[0x95])],
                            &[Token::Literal(&[0x98])],
                            &[Token::Literal(&[0x99])],
                            &[Token::Literal(&[0x9C])],
                            &[Token::Literal(&[0x9D])],
                            &[Token::Literal(&[0xA0])],
                            &[Token::Literal(&[0xA1])],
                            &[Token::Literal(&[0xA4])],
                            &[Token::Literal(&[0xA5])],
                            &[Token::Literal(&[0xA8])],
                            &[Token::Literal(&[0xA9])],
                            &[Token::Literal(&[0xAC])],
                            &[Token::Literal(&[0xAD])],
                            &[Token::Literal(&[0xB0])],
                            &[Token::Literal(&[0xB1])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x00])],
                            &[Token::Literal(&[0x01])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x40])],
                            &[Token::Literal(&[0x41])],
                            &[Token::Literal(&[0x60])],
                            &[Token::Literal(&[0x80])],
                            &[Token::Literal(&[0x81])],
                            &[Token::Literal(&[0x60])],
                            &[Token::Literal(&[0xA0])],
                            &[Token::Literal(&[0xC0])],
                            &[Token::Literal(&[0xC1])],
                            &[Token::Literal(&[0xE0])],
                        ]),
                    ],
                },
            }],
        },
        Signature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0x49, 0x44, 0x33]),
                        Token::WildcardCountRange(0, 2_045),
                        Token::Literal(&[0xFF]),
                        Token::Any(&[
                            &[Token::Literal(&[0xF0])],
                            &[Token::Literal(&[0xF1])],
                            &[Token::Literal(&[0xF8])],
                            &[Token::Literal(&[0xF9])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x40])],
                            &[Token::Literal(&[0x41])],
                            &[Token::Literal(&[0x44])],
                            &[Token::Literal(&[0x45])],
                            &[Token::Literal(&[0x48])],
                            &[Token::Literal(&[0x49])],
                            &[Token::Literal(&[0x4C])],
                            &[Token::Literal(&[0x4D])],
                            &[Token::Literal(&[0x50])],
                            &[Token::Literal(&[0x51])],
                            &[Token::Literal(&[0x54])],
                            &[Token::Literal(&[0x55])],
                            &[Token::Literal(&[0x58])],
                            &[Token::Literal(&[0x59])],
                            &[Token::Literal(&[0x5C])],
                            &[Token::Literal(&[0x5D])],
                            &[Token::Literal(&[0x60])],
                            &[Token::Literal(&[0x61])],
                            &[Token::Literal(&[0x64])],
                            &[Token::Literal(&[0x65])],
                            &[Token::Literal(&[0x68])],
                            &[Token::Literal(&[0x69])],
                            &[Token::Literal(&[0x6C])],
                            &[Token::Literal(&[0x6D])],
                            &[Token::Literal(&[0x70])],
                            &[Token::Literal(&[0x71])],
                            &[Token::Literal(&[0x80])],
                            &[Token::Literal(&[0x81])],
                            &[Token::Literal(&[0x84])],
                            &[Token::Literal(&[0x85])],
                            &[Token::Literal(&[0x88])],
                            &[Token::Literal(&[0x89])],
                            &[Token::Literal(&[0x8C])],
                            &[Token::Literal(&[0x8D])],
                            &[Token::Literal(&[0x90])],
                            &[Token::Literal(&[0x91])],
                            &[Token::Literal(&[0x94])],
                            &[Token::Literal(&[0x95])],
                            &[Token::Literal(&[0x98])],
                            &[Token::Literal(&[0x99])],
                            &[Token::Literal(&[0x9C])],
                            &[Token::Literal(&[0x9D])],
                            &[Token::Literal(&[0xA0])],
                            &[Token::Literal(&[0xA1])],
                            &[Token::Literal(&[0xA4])],
                            &[Token::Literal(&[0xA5])],
                            &[Token::Literal(&[0xA8])],
                            &[Token::Literal(&[0xA9])],
                            &[Token::Literal(&[0xAC])],
                            &[Token::Literal(&[0xAD])],
                            &[Token::Literal(&[0xB0])],
                            &[Token::Literal(&[0xB1])],
                        ]),
                        Token::Any(&[
                            &[Token::Literal(&[0x00])],
                            &[Token::Literal(&[0x01])],
                            &[Token::Literal(&[0x20])],
                            &[Token::Literal(&[0x40])],
                            &[Token::Literal(&[0x41])],
                            &[Token::Literal(&[0x60])],
                            &[Token::Literal(&[0x80])],
                            &[Token::Literal(&[0x81])],
                            &[Token::Literal(&[0x60])],
                            &[Token::Literal(&[0xA0])],
                            &[Token::Literal(&[0xC0])],
                            &[Token::Literal(&[0xC1])],
                            &[Token::Literal(&[0xE0])],
                        ]),
                    ],
                },
            }],
        },
    ],
    related_formats: &[RelatedFormat {
        relationship_type: RelationshipType::HasPriorityOver,
        id: 687,
    }],
};
