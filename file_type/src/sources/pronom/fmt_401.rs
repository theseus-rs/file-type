use crate::format::{
    ByteSequence, FileFormat, InternalSignature, PositionType, Regex, RelatedFormat,
    RelationshipType, Token,
};

pub(crate) const FMT_401: FileFormat = FileFormat {
    id: 1_149,
    puid: "fmt/401",
    name: "X-Windows Screen Dump",
    extensions: &["xwd", "xdm"],
    media_types: &[],
    internal_signatures: &[InternalSignature {
        byte_sequences: &[ByteSequence {
            position_type: PositionType::BOF,
            offset: Some(0),
            regex: Regex {
                tokens: &[
                    Token::Literal(&[0x00, 0x00, 0x00]),
                    Token::SingleWildcard,
                    Token::Literal(&[0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00]),
                    Token::Any(&[
                        &[Token::Literal(&[0x00])],
                        &[Token::Literal(&[0x01])],
                        &[Token::Literal(&[0x02])],
                    ]),
                    Token::Literal(&[0x00, 0x00, 0x00]),
                    Token::Range(&[0x01], &[0x20]),
                    Token::WildcardCount(12),
                    Token::Literal(&[0x00, 0x00, 0x00]),
                    Token::Any(&[&[Token::Literal(&[0x00])], &[Token::Literal(&[0x01])]]),
                    Token::Literal(&[0x00, 0x00, 0x00]),
                    Token::Any(&[
                        &[Token::Literal(&[0x08])],
                        &[Token::Literal(&[0x10])],
                        &[Token::Literal(&[0x20])],
                    ]),
                    Token::Literal(&[0x00, 0x00, 0x00]),
                    Token::Any(&[&[Token::Literal(&[0x00])], &[Token::Literal(&[0x01])]]),
                    Token::Literal(&[0x00, 0x00, 0x00]),
                    Token::Any(&[
                        &[Token::Literal(&[0x08])],
                        &[Token::Literal(&[0x10])],
                        &[Token::Literal(&[0x20])],
                    ]),
                    Token::Literal(&[0x00, 0x00, 0x00]),
                    Token::Any(&[
                        &[Token::Literal(&[0x01])],
                        &[Token::Literal(&[0x02])],
                        &[Token::Literal(&[0x03])],
                        &[Token::Literal(&[0x04])],
                        &[Token::Literal(&[0x05])],
                        &[Token::Literal(&[0x06])],
                        &[Token::Literal(&[0x07])],
                        &[Token::Literal(&[0x08])],
                        &[Token::Literal(&[0x09])],
                        &[Token::Literal(&[0x0A])],
                        &[Token::Literal(&[0x0B])],
                        &[Token::Literal(&[0x0C])],
                        &[Token::Literal(&[0x0D])],
                        &[Token::Literal(&[0x0E])],
                        &[Token::Literal(&[0x0F])],
                        &[Token::Literal(&[0x10])],
                        &[Token::Literal(&[0x18])],
                        &[Token::Literal(&[0x20])],
                    ]),
                    Token::WildcardCount(4),
                    Token::Literal(&[0x00, 0x00, 0x00]),
                    Token::Range(&[0x00], &[0x05]),
                ],
            },
        }],
    }],
    related_formats: &[],
};
