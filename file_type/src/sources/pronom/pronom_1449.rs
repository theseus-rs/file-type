use crate::format::{
    ByteSequence, FileFormat, InternalSignature, PositionType, Regex, RelatedFormat,
    RelationshipType, SourceType, Token,
};

pub(crate) const PRONOM_1449: FileFormat = FileFormat {
    id: 1_449,
    source_type: SourceType::Pronom,
    name: "QuarkXPress Report File",
    extensions: &["qxp report", "xtg", "qxp%20report"],
    media_types: &["application/vnd.Quark.QuarkXPress"],
    internal_signatures: &[
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0x3C, 0x76, 0x31, 0x2E, 0x36, 0x30, 0x3E, 0x3C, 0x65]),
                        Token::Any(&[&[Token::Literal(&[0x30])], &[Token::Literal(&[0x31])]]),
                        Token::Literal(&[0x3E, 0x0D]),
                        Token::WildcardCountRange(1, 512),
                        Token::Literal(&[
                            0x50, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20,
                            0x62, 0x65, 0x65, 0x6E, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x62,
                            0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6F, 0x6C, 0x6C, 0x6F, 0x77,
                            0x69, 0x6E, 0x67, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x73,
                            0x20, 0x6F, 0x66, 0x20, 0x51, 0x75, 0x61, 0x72, 0x6B, 0x58, 0x50, 0x72,
                            0x65, 0x73, 0x73,
                        ]),
                    ],
                },
            }],
        },
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[
                            0x3C, 0x00, 0x76, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x36, 0x00, 0x30, 0x00,
                            0x3E, 0x00, 0x3C, 0x00, 0x65, 0x00,
                        ]),
                        Token::Any(&[&[Token::Literal(&[0x30])], &[Token::Literal(&[0x31])]]),
                        Token::Literal(&[0x00, 0x3E, 0x00]),
                        Token::WildcardCountRange(1, 1_024),
                        Token::Literal(&[
                            0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6A, 0x00, 0x65, 0x00, 0x63, 0x00,
                            0x74, 0x00, 0x20, 0x00, 0x68, 0x00, 0x61, 0x00, 0x73, 0x00, 0x20, 0x00,
                            0x62, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x73, 0x00,
                            0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x62, 0x00,
                            0x79, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00,
                            0x66, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00,
                            0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x76, 0x00, 0x65, 0x00,
                            0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00,
                            0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x51, 0x00, 0x75, 0x00,
                            0x61, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x58, 0x00, 0x50, 0x00, 0x72, 0x00,
                            0x65, 0x00, 0x73, 0x00, 0x73, 0x00,
                        ]),
                    ],
                },
            }],
        },
        InternalSignature {
            byte_sequences: &[ByteSequence {
                position_type: PositionType::BOF,
                offset: Some(0),
                regex: Regex {
                    tokens: &[
                        Token::Literal(&[0x3C, 0x76, 0x31, 0x2E, 0x36, 0x30, 0x3E, 0x3C, 0x65]),
                        Token::Any(&[&[Token::Literal(&[0x30])], &[Token::Literal(&[0x31])]]),
                        Token::Literal(&[0x3E, 0x0D]),
                        Token::WildcardCountRange(1, 512),
                        Token::Literal(&[
                            0x44, 0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x68, 0x61, 0x73,
                            0x20, 0x62, 0x65, 0x65, 0x6E, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x20,
                            0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6F, 0x6C, 0x6C, 0x6F,
                            0x77, 0x69, 0x6E, 0x67, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E,
                            0x73, 0x20, 0x6F, 0x66, 0x20, 0x51, 0x75, 0x61, 0x72, 0x6B, 0x58, 0x50,
                            0x72, 0x65, 0x73, 0x73,
                        ]),
                    ],
                },
            }],
        },
    ],
    related_formats: &[],
};
